#!/usr/bin/env python3

import re
from gradelib import *

r = Runner(save("xv6.out"))

@test(0, "running cowtest")
def test_cowtest():
    r.run_qemu(shell_script([
        'cowtest'
    ]))

@test(15, "simple", parent=test_cowtest)
def test_simple():
    matches = re.findall("^simple: ok$", r.qemu.output, re.M)
    assert_equal(len(matches), 2, "Number of appearances of 'simple: ok'")

@test(15, "three", parent=test_cowtest)
def test_three():
    matches = re.findall("^three: ok$", r.qemu.output, re.M)
    assert_equal(len(matches), 3, "Number of appearances of 'three: ok'")

@test(10, "file", parent=test_cowtest)
def test_file():
    r.match('^file: ok$')

@test(0, "running lazytests", parent=test_cowtest)
def test_lazytests():
    assert_ok([test_cowtest, test_simple, test_three, test_file])
    r.run_qemu(shell_script([
        'lazytests'
    ]))

@test(10, "lazy: map", parent=test_lazytests)
def test_filetest():
    r.match("^test lazy unmap: OK$")

@test(10, "lazy: unmap", parent=test_lazytests)
def test_memtest():
    r.match("test lazy alloc: OK$")

@test(0, "running threadtest")
def test_threadtest():
    r.run_qemu(shell_script([
        'threadtest'
    ]))

@test(15, "threadtest: testthreadrun", parent=test_threadtest)
def test_threadtest_testthreadrun():
    r.match('^testthreadrun passed$')

@test(15, "threadtest: testthreadmore", parent=test_threadtest)
def test_threadtest_testthreadmore():
    r.match('^\\.?testthreadmore passed$')

@test(10, "threadtest: testthreadsbrk", parent=test_threadtest)
def test_threadtest_testthreadsbrk():
    r.match('^\\.?testthreadsbrk passed$')

@test(0, "usertests")
def test_usertests():
    r.run_qemu(shell_script([
        'usertests'
    ]), timeout=900)

def usertest_check(testcase, nextcase, output):
    if not re.search(r'\ntest {}: [\s\S]*OK\ntest {}'.format(testcase, nextcase), output):
        raise AssertionError('Failed ' + testcase)

@test(20, "usertests: all tests", parent=test_usertests)
def test_usertests_all():
    r.match('^ALL TESTS PASSED$')

run_tests()
